
public class metodoDeque {

	private Deque inicio = null;
	private Deque fim = null;
	private int total = 0;
	
	public void adicionarFim(Deque nome) {
		if(inicio == null) {
			inicio = nome;
			fim = nome;
		}else if(fim.getProximo() == null) {
			nome.setAnterior(fim);
			fim.setProximo(nome);
			fim = nome;
		}
		total++;
	}

	public void listar() {
		Deque aux = inicio;
		
		while(aux != null) {
			System.out.println(aux.getNome());
            aux = aux.getProximo();
		}
	}

	public void adicionarInicio(Deque nome) {
		if(inicio == null) {
			inicio = nome;
			fim = nome;
		}else if(inicio.getProximo() == null) {
			nome.setProximo(inicio);
			inicio.setAnterior(nome);
			inicio = nome;
		}else {
			nome.setProximo(inicio);
			inicio = nome;
		}
		total++;
	}
	
	public void removerInicio() {
		if(qtdNomes() == 0) {
			throw new IllegalArgumentException("Deque vazio! Não há elementos para remover.");
		}
		Deque aux = inicio;
		inicio = aux.getProximo();
		total--;
	}
	
	public void removerFim() {
		if(qtdNomes() == 0) {
			throw new IllegalArgumentException("Deque vazio! Não há elementos para remover.");
		}
		
		Deque aux = inicio;
		Deque elemento = fim;
		
		while(aux != null) {
			if(aux.getProximo() == elemento) {
				Deque prox = aux.getProximo();
				aux.setProximo(prox.getProximo());
				fim = aux;
			}
			else if(aux == elemento) {
				inicio = elemento.getProximo();
			}
			aux = aux.getProximo();
		}
		
		total--;
	}
	
	public int qtdNomes() {
		return total;
	}
}
